"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6342],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=o,b=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(b,r(r({ref:t},p),{},{components:n})):a.createElement(b,r({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var l=2;l<i;l++)r[l]=n[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8217:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),r=["components"],s={sidebar_position:2},c="StateObject",l={unversionedId:"API/state and state objects/state-object",id:"API/state and state objects/state-object",isDocsHomePage:!1,title:"StateObject",description:"Classes implementing this Interface are StateImageObject, StateRegion, and StateLocation.",source:"@site/docs/API/state and state objects/state-object.md",sourceDirName:"API/state and state objects",slug:"/API/state and state objects/state-object",permalink:"/brobot/docs/API/state and state objects/state-object",editUrl:"https://jspinak.github.io/brobot/docs/API/state and state objects/state-object.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"State",permalink:"/brobot/docs/API/state and state objects/state"},next:{title:"StateImageObject",permalink:"/brobot/docs/API/state and state objects/state-image-object"}},p=[{value:"Methods",id:"methods",children:[],level:2}],d={toc:p};function u(e){var t=e.components,n=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"stateobject"},"StateObject"),(0,i.kt)("p",null,"Classes implementing this Interface are StateImageObject, StateRegion, and StateLocation.  "),(0,i.kt)("p",null,"MatchObjects are created for each match found during a Find operation, and include\nthe StateObject that was found. It is often useful to be able to retrieve\ninformation about the StateObject that resulted in the MatchObject. Once a MatchObject\nis created, the type of StateObject (Image/Region/Location) is no longer needed\nand the included object is of type StateObject. "),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"String getName()")," is used for reporting and console output.   "),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"StateEnum getOwnerStateName()")," is used primarily to update the active States in StateMemory\nduring a Find operation.   "),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Position getPosition()")," is used to reference a single point in the MatchObject.   "),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Anchors getAnchors()")," is used by DefineRegion Actions to specify the point used in the\nMatchObject and the edges it defines in the Region being created.  "),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"int getTimesActedOn()"),(0,i.kt)("br",{parentName:"p"}),"\n","Knowing how many times an object's match was acted on can be\nvaluable for understanding the actual automation as well as for performing mocks.  "),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"void addTimesActedOn()")," increments the number of times the StateObject was acted on.   "),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"void setTimesActedOn(int times)")," is used primarily to reset the times acted on for all\nStateObjects before performing an Action.  "),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"void setProbabilityExists(int probabilityExists)"),(0,i.kt)("br",{parentName:"p"}),"\n","This method provides a way to change the probability the StateObject still\nexists. It can be used in an application for more granular control of a mock run.\nYou can change the probability that objects acted on are visible\nfor future actions. For example, you may wish to simulate that an image\ndisappears after being clicked.",(0,i.kt)("br",{parentName:"p"}),"\n","In relation to repetitions within Actions (examples are the ClickUntil Action and\nany Action with the ActionOptions timesToRepeatIndividualAction or\nmaxTimesToRepeatActionSequence set to a value greater than 1):\nThis method could be used for simulating disappearance within an Action. It is not implemented\nfor this in the current version of Brobot because the preferred way of performing mocks\nis with MatchHistories and not with probabilities. It can be used for future\ndevelopment in case development of probability-based mocking becomes a priority. This means\nthat in the current version, when mocking, clicking on an image match multiple times will\noccur each time if there is no MatchHistory. To simulate an object disappearing after a\nclick, include a failed MatchSnapshot in the MatchHistory along with one or more\nsuccessful MatchSnapshots. Since MatchSnapshots are chosen randomly, including a failed\nSnapshot will make it likely that the StateObject disappears at some iteration of the\noperation.  "),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"MatchHistory getMatchHistory()")," is used for producing mock results from MatchObjects.   "),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"void addSnapshot(MatchSnapshot matchSnapshot)"),(0,i.kt)("br",{parentName:"p"}),"\n","Snapshots are added to the MatchObject,\nif enabled, at the end of an Action. This occurs only during real execution and provides\na real execution history that can be used for future mock runs. In the current version\nthe MatchHistories will need to be processed by the application. Brobot does not save\nthese to a database or to a file during execution. Due to this, the default value of\nBrobotSettings.saveSnapshots is false, and you will need to enable Snapshots as well as\nsave them in your code in order to collect them from real execution."))}u.isMDXComponent=!0}}]);