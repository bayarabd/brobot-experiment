"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6902],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,f=m["".concat(c,".").concat(d)]||m[d]||p[d]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4432:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return m}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:2},c="States",l={unversionedId:"introduction/core-features/states",id:"introduction/core-features/states",isDocsHomePage:!1,title:"States",description:"The state structure of Brobot attempts to simplify its environment by",source:"@site/docs/introduction/core-features/states.md",sourceDirName:"introduction/core-features",slug:"/introduction/core-features/states",permalink:"/brobot/docs/introduction/core-features/states",editUrl:"https://jspinak.github.io/brobot/docs/introduction/core-features/states.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/brobot/docs/introduction/core-features/overview"},next:{title:"Mocking",permalink:"/brobot/docs/introduction/core-features/mocking"}},u=[{value:"State Management",id:"state-management",children:[],level:2},{value:"Cleaner and Simpler Code",id:"cleaner-and-simpler-code",children:[],level:2}],p={toc:u};function m(e){var t=e.components,s=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"states"},"States"),(0,o.kt)("p",null,"The state structure of Brobot attempts to simplify its environment by\nemulating the structure of html pages. States are comprised of images and text\nthat all coexist at the same time, as well as regions,\nlocations, and strings that have a unique meaning here (for example,\nclicking a location or typing a string produces a state-specific reaction)."),(0,o.kt)("p",null,"The image below shows active states in different colors.\nNot all of these states would be needed for\nevery application involving a finance website and a spreadsheet program, and\nsimpler applications could get by with just a few states. In practice, there\nare usually multiple active states at any time.\n",(0,o.kt)("img",{alt:"States Example",src:n(4273).Z})),(0,o.kt)("h2",{id:"state-management"},"State Management"),(0,o.kt)("p",null,"The existence of states allows brobot to control process flow in a way\nsimilar to the process flow in an html document. States are managed with\nthe following processes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"State-specific Transition classes define transitions to other states\nand finish any incoming transitions. ",(0,o.kt)("a",{parentName:"li",href:"state-management#transitions"},"more on transitions")),(0,o.kt)("li",{parentName:"ul"},"A Path Finder finds and sorts paths from active states to a target state. ",(0,o.kt)("a",{parentName:"li",href:"state-management#paths"},"more on paths")),(0,o.kt)("li",{parentName:"ul"},"State Memory keeps track of states currently visible. ",(0,o.kt)("a",{parentName:"li",href:"state-management#state-memory"},"more on state memory"))),(0,o.kt)("h2",{id:"cleaner-and-simpler-code"},"Cleaner and Simpler Code"),(0,o.kt)("p",null,"States are defined as collections of state objects. No methods are included in state classes.\nEach state has a state transition class, which contains only transition methods.\nMoving from one state to another, finding the current state when lost, returning to the\nprocess flow, and maintaining state memory are all handled by Brobot. The developer is free\nto concentrate more on business logic and less on dealing with uncertainty and unexpected\nsituations."))}m.isMDXComponent=!0},4273:function(e,t,n){t.Z=n.p+"assets/images/states3-98898e923053ebe0970df7aca545cd9d.png"}}]);