"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7885],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),l=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=l(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(n),f=r,h=d["".concat(s,".").concat(f)]||d[f]||p[f]||i;return n?o.createElement(h,a(a({ref:t},u),{},{components:n})):o.createElement(h,a({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var l=2;l<i;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9155:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var o=n(7462),r=n(3366),i=(n(7294),n(3905)),a=["components"],c={sidebar_position:5},s="Controlling the GUI",l={unversionedId:"introduction/core-features/controlling-the-GUI",id:"introduction/core-features/controlling-the-GUI",isDocsHomePage:!1,title:"Controlling the GUI",description:"Brobot interacts with the GUI using the Sikuli library. This is done with",source:"@site/docs/introduction/core-features/controlling-the-GUI.md",sourceDirName:"introduction/core-features",slug:"/introduction/core-features/controlling-the-GUI",permalink:"/brobot/docs/introduction/core-features/controlling-the-GUI",editUrl:"https://jspinak.github.io/brobot/docs/introduction/core-features/controlling-the-GUI.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Processes as Objects",permalink:"/brobot/docs/introduction/core-features/processes-as-objects"},next:{title:"State Management",permalink:"/brobot/docs/introduction/core-features/state-management"}},u=[{value:"Sikuli Wrappers",id:"sikuli-wrappers",children:[],level:2},{value:"Basic Actions",id:"basic-actions",children:[],level:2},{value:"Composite Actions",id:"composite-actions",children:[],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"controlling-the-gui"},"Controlling the GUI"),(0,i.kt)("p",null,"Brobot interacts with the GUI using the Sikuli library. This is done with\n3 main levels of abstraction:"),(0,i.kt)("h2",{id:"sikuli-wrappers"},"Sikuli Wrappers"),(0,i.kt)("p",null,"These are the methods that form the interface between Brobot and Sikuli.\nSikuli Wrappers route the operational instructions either to Sikuli methods,\nwhich control the mouse and keyboard and capture data from the screen, or to\nfunctions that mock (simulate) these methods. When calling Sikuli methods,\nthe Wrappers convert Brobot data types to Sikuli data types.",(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("a",{parentName:"p",href:"../../API/functions/sikuli-wrappers"},"See in detail")),(0,i.kt)("h2",{id:"basic-actions"},"Basic Actions"),(0,i.kt)("p",null,"Comprising Actions such as Find and Click, Basic Actions are simple processes\nthat require a maximum of 1 Find operation. Find operations are pretty\npowerful and can return Matches for Images with a variety of search options.\nFor example, the DefineInsideAnchors class uses a Find Action to return a Match\nfor each object in the ObjectCollection, and then uses these Match objects to\ndefine a Region. All of this is done with 1 Find operation.",(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("a",{parentName:"p",href:"../../API/functions/basic-actions"},"See in detail")),(0,i.kt)("h2",{id:"composite-actions"},"Composite Actions"),(0,i.kt)("p",null,"Composite Actions use Basic Actions and Sikuli Wrappers as building blocks\nto create more complex operations. A typical candidate for a Composite Action\nis a process that requires more than 1 Find operation, although Composite\nActions also could be made of multiple Basic Actions that require no Find\noperations. For a Composite Action, achieving its goal with only 1 Find\noperation is either not possible or would make the operation too confusing\nor too complex. Examples of Composite Actions are ClickUntil and Drag.",(0,i.kt)("br",{parentName:"p"}),"\n",(0,i.kt)("a",{parentName:"p",href:"../../API/functions/composite-actions"},"See in detail")))}d.isMDXComponent=!0}}]);