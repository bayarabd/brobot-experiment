"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3493],{3905:function(e,t,o){o.d(t,{Zo:function(){return l},kt:function(){return m}});var n=o(7294);function i(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){i(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,n,i=function(e,t){if(null==e)return{};var o,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(i[o]=e[o]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}var c=n.createContext({}),u=function(e){var t=n.useContext(c),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},l=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var o=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(o),m=i,h=d["".concat(c,".").concat(m)]||d[m]||p[m]||r;return o?n.createElement(h,a(a({ref:t},l),{},{components:o})):n.createElement(h,a({ref:t},l))}));function m(e,t){var o=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=o.length,a=new Array(r);a[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var u=2;u<r;u++)a[u]=o[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,o)}d.displayName="MDXCreateElement"},429:function(e,t,o){o.r(t),o.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var n=o(7462),i=o(3366),r=(o(7294),o(3905)),a=["components"],s={sidebar_position:1},c="Why Brobot?",u={unversionedId:"introduction/introduction",id:"introduction/introduction",title:"Why Brobot?",description:"Brobot makes it easier to develop complex GUI automation.",source:"@site/docs/introduction/introduction.md",sourceDirName:"introduction",slug:"/introduction/",permalink:"/brobot/docs/introduction/",draft:!1,editUrl:"https://jspinak.github.io/brobot/docs/introduction/introduction.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Overview",permalink:"/brobot/docs/introduction/core-features/overview"}},l={},p=[{value:"GUI Automation is not Tested",id:"gui-automation-is-not-tested",level:2},{value:"GUI Processes Are Stochastic",id:"gui-processes-are-stochastic",level:2},{value:"Sikuli vs Selenium",id:"sikuli-vs-selenium",level:3},{value:"The Difficulties in Testing a Stochastic Process",id:"the-difficulties-in-testing-a-stochastic-process",level:3}],d={toc:p};function m(e){var t=e.components,o=(0,i.Z)(e,a);return(0,r.kt)("wrapper",(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"why-brobot"},"Why Brobot?"),(0,r.kt)("p",null,"Brobot makes it easier to develop complex GUI automation. "),(0,r.kt)("h1",{id:"gui-processes"},"GUI Processes"),(0,r.kt)("p",null,"A GUI automation application is a\nprogram that sees what a human would see and interacts with the\ncomputer by using the mouse and keyboard. Common examples of GUI automation apps\nare testing applications for other software and bots that play games autonomously."),(0,r.kt)("h2",{id:"gui-automation-is-not-tested"},"GUI Automation is not Tested"),(0,r.kt)("p",null,"Testing software during development is considered good practice\nbecause it makes the development process more efficient. Bugs can\nbe identified immediately and corrected before they influence other\nparts of the application. As the app becomes more complex, the benefits\nfrom testing become more profound."),(0,r.kt)("p",null,"GUI automation applications are not tested. This makes their development,\nespecially when the applications become complex, error-prone and\ntime-consuming. But, why aren't they tested?"),(0,r.kt)("h2",{id:"gui-processes-are-stochastic"},"GUI Processes Are Stochastic"),(0,r.kt)("p",null,"GUI automations apps are not tested because the processes that are being\nautomated are stochastic processes. "),(0,r.kt)("h3",{id:"sikuli-vs-selenium"},"Sikuli vs Selenium"),(0,r.kt)("p",null,"To illustrate why this is important, let's compare two different pieces of automation software:\nSikuli and Selenium. Both Sikuli and Selenium can automate process flows in\nWeb sites, but they do it differently. Sikuli recognizes images and can click\non these images or use the scroll bar to navegate through a Web site. Selenium\naccesses the html of the Web site and manipulates Web objects directly. The process\nSikuli uses is a stochastic process since it is not sure to recognize an image\ncorrectly and attempting to drag the scroll bar is not guaranteed to actually scroll\nthe page. In contrast, the process Selenium uses is guaranteed to succeed since\nSelenium is working with the html objects themselves and not their representations.\nSo why would anyone use Sikuli to automate the use of Web pages if it introduces\nadded complexity? In short, you shouldn't use Sikuli to automate Web pages. Sikuli\nshould be used only where Selenium cannot be used, which is everywhere outside\nof the Web. Outside of the Web, most programs do not provide an API for\ndevelopers to manipulate the program's objects directly. The only way to automate\nthese programs is to interact with the program in the same way a person\nwould: by looking at the screen and using the mouse and keyboard."),(0,r.kt)("h3",{id:"the-difficulties-in-testing-a-stochastic-process"},"The Difficulties in Testing a Stochastic Process"),(0,r.kt)("p",null,"But why aren't these applications tested during development? Well, how?\nHow do you test if your automation app will correctly scroll down on the page?\nTraditionally this was done through trial and error. A developer would code the\napp to scroll down and then run it to see if it worked. This is ok for small\napplications, but when an app becomes complex this is a huge problem for\ndevelopment. The longer it takes to recognize an error, the more time-consuming\nand frustrating the development process will be. Also, code in a process automation app\nis highly interdependent, meaning that changes in one part of the code base will\naffect the functionality in other parts. Not scrolling correctly will affect the\nsuccess of the code tasked with what to do at the bottom of the page. With GUI\nautomation, potential errors are everywhere. Recognizing the minimize window button\nby mistake could result in a minimized program window and your automation\napp being unable to continue. Another program could pop up a window in front of your\ntarget program to ask the user to confirm an update. The existence of uncertainty\nis what defines this process as stochastic, and it adds a lot of complexity to\nthe development of automation applications."))}m.isMDXComponent=!0}}]);